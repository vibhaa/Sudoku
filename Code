#include<fstream.h>
#include<graphics.h>
#include<conio.h>
#include<dos.h>
#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>

int temp[81];

//mouse functions begin
union REGS in, out;

// detects mouse presence
void detect_mouse ()
 {
  in.x.ax = 0;
  int86 (0X33,&in,&out);
 }
 
void showmouse_graphics ()
 {
   in.x.ax = 1;
   int86 (0X33,&in,&out);
 }
 
void hide_mouse ()
 {
   in.x.ax = 2;
   int86 (0X33,&in,&out);
 }
 
// detects the mouse click - whether its right, left or center, 
// if left it takes in the x and y coordinates of the mouse click
void detect (int &x,int &y)
{
  while (!kbhit()) // when mouse has been clicked
  {
     in.x.ax = 3;
     int86 (0X33,&in,&out);
     if (out.x.bx == 1)
       {
	        x = out.x.cx;
	        y = out.x.dx;
       }
       
	    if (out.x.bx == 2)
	    {
	        setcolor(15);
			    outtextxy(2,getmaxy()-100,"Please use left key");
			}
	    
	    if (out.x.bx == 3) ;
	    delay (100); // Otherwise due to quick computer response 100s of words will get print
  }
}

// Restricts the mouse movement to the coordinates that are passed as parameters
void restrict (int x1,int y1,int x2, int y2)
{
  in.x.ax = 7;
  in.x.cx = x1;
  in.x.dx = x2;
  int86 (0X33,&in,&out);
  in.x.ax = 8;
  in.x.cx = y1;
  in.x.dx = y2;
  int86 (0X33,&in,&out);
}

//Mouse functions end

class puzzle
{ 
  int a[9],b[9],c[9],d[9],e[9],f[9],g[9],h[9],l[9]; // rowd of the grid
  int track[30]; // tracker that checks if select spot of grid has been already generated
  
  public:
    puzzle();
    void generate (int []);
    int check(int);
    void disp();
    int enter();
    void store (int x);
    void fill ();
    int rowcheck (int, int);
    int colcheck (int, int);
    int boxcheck (int, int, int);
}P;

// stores the passed parameter in the track array - which stores all the spots of the grid which have 
// already been chosen randomly to be revealed (to avoid the errors of same number generation)
void puzzle::store (int x)
{static int i=0;
   track[i++]=x;}
   
// contructor that initializes all squares of the puzzle to 0, and all elements of track to -1
puzzle::puzzle()
{
  for (int i=0;i<9;i++)
     a[i]=b[i]=c[i]=d[i]=e[i]=f[i]=g[i]=h[i]=l[i]=0;
  for (i=0;i<30;i++) track[i]=-1;
}

int puzzle::check (int x)
{for (int i=0;i<30;i++)
  if (track[i]==x)
   return 0;
 return 1;}
void puzzle::generate(int t[])
{int ran,count=0,k;
 randomize();
 while (count<30)
 {while (1)
  {ran=random(81);
   if (check(ran))
   {store(ran); break;}
  }
  count++;
  k=t[ran];
  if (ran<9)
  a[ran]=k;
  else if (ran<18)
  b[ran-9]=k;
  else if (ran<27)
  c[ran-18]=k;
  else if (ran<36)
  d[ran-27]=k;
  else if (ran<45)
  e[ran-36]=k;
  else if (ran<54)
  f[ran-45]=k;
  else if (ran<63)
  g[ran-54]=k;
  else if (ran<72)
  h[ran-63]=k;
  else
  l[ran-72]=k;
 }
}
void puzzle::fill()
{int i=0,j=0;
 for (i=0;i<9;i++,j++)
 a[i]=temp[j];
 for (i=0;i<9;i++,j++)
 b[i]=temp[j];
 for (i=0;i<9;i++,j++)
 c[i]=temp[j];
 for (i=0;i<9;i++,j++)
 d[i]=temp[j];
 for (i=0;i<9;i++,j++)
 e[i]=temp[j];
 for (i=0;i<9;i++,j++)
 f[i]=temp[j];
 for (i=0;i<9;i++,j++)
 g[i]=temp[j];
 for (i=0;i<9;i++,j++)
 h[i]=temp[j];
 for (i=0;i<9;i++,j++)
 l[i]=temp[j];
}
void mindisp (int x, int y, int z[])
{int k=getmaxx()/2;
 int p=getmaxy()/2;
 setcolor (4);
 settextstyle (0,0,2);
 char t[5];
 itoa(z[y],t,10);
 outtextxy(k-120+30*y,p-125+x*30,t);
}
int mincheck(int x, int y[])
{for (int i=0;i<9;i++)
  if(y[i]==x)
   return 0;
 return 1;
}
int puzzle::rowcheck(int x, int y)
{int k;
 switch (y)
 {case 1:k=mincheck(x,a);break;
  case 2:k=mincheck(x,b);break;
  case 3:k=mincheck(x,c);break;
  case 4:k=mincheck(x,d);break;
  case 5:k=mincheck(x,e);break;
  case 6:k=mincheck(x,f);break;
  case 7:k=mincheck(x,g);break;
  case 8:k=mincheck(x,h);break;
  case 9:k=mincheck(x,l);break;
 }
 return k;
}
int puzzle::colcheck (int x, int y)
{if ((x==a[y-1])||(x==b[y-1])||(x==c[y-1])||(x==d[y-1]))
    return 0;
 if ((x==e[y-1])||(x==h[y-1])||(x==l[y-1])||(x==f[y-1])||(x==g[y-1]))
    return 0;
 return 1;
}
int mincheck2 (int z, int p[],int q[], int r[], int y)
{for (int i=y;i<y+3;i++)
  if (z==p[i]||z==q[i]||z==r[i])
      return 0;
 return 1;
}
int puzzle::boxcheck(int z, int x,int y)
{int k;
 if (y<=3)
  {if (x<=3) k=mincheck2(z,a,b,c,0);
   else if (x<=6) k=mincheck2(z,d,e,f,0);
   else k=mincheck2(z,g,h,l,0);}
 else if (y<=6)
  {if (x<=3) k=mincheck2(z,a,b,c,3);
   else if (x<=6) k=mincheck2(z,d,e,f,3);
   else k=mincheck2(z,g,h,l,3);}
 else
  {if (x<=3) k=mincheck2(z,a,b,c,6);
   else if (x<=6) k=mincheck2(z,d,e,f,6);
   else k=mincheck2(z,g,h,l,6);}
 return k;
}
void minidisp(int x, int y[])
{int k=getmaxx()/2;
 int z=getmaxy()/2;
 setcolor(15);
 settextstyle(0,0,2);
 char t[5];
 for (int i=0;i<9;i++)
 if (y[i])
 {itoa(y[i],t,10);
  outtextxy(k-120+30*i,z-125+x*30,t);
 }
 else continue;
}
void puzzle::disp()
{minidisp(0,a);
 minidisp(1,b);
 minidisp(2,c);
 minidisp(3,d);
 minidisp(4,e);
 minidisp(5,f);
 minidisp(6,g);
 minidisp(7,h);
 minidisp(8,l);
}
void display()
{cleardevice();
 setbkcolor(BLUE);
 setcolor(15);
 int k=getmaxx()/2;
 int l=getmaxy()/2;
 setbkcolor(BLUE);
 setlinestyle(SOLID_LINE, 1,3);
 line (k-135,l-135,k-135,l+135);   //vertical line 1
 setlinestyle(SOLID_LINE, 1,1);
 line (k-105,l-135,k-105,l+135);   //vertical line 2
 line (k-75,l-135,k-75,l+135);     //vertical line 3
 setlinestyle(SOLID_LINE, 1,3);
 line (k-45,l-135,k-45,l+135);     //vertical line 4
 setlinestyle(SOLID_LINE, 1,1);
 line (k-15,l-135,k-15,l+135);     //vertical line 5
 line (k+15,l-135,k+15,l+135);     //vertical line 6
 setlinestyle(SOLID_LINE, 1,3);
 line (k+45,l-135,k+45,l+135);     //vertical line 7
 setlinestyle(SOLID_LINE, 1,1);
 line (k+75,l-135,k+75,l+135);     //vertical line 8
 line (k+105,l-135,k+105,l+135);   //vertical line 9
 setlinestyle(SOLID_LINE, 1,3);
 line (k+135,l-135,k+135,l+135);   //vertical line 10
 line (k-135,l-135,k+135,l-135);   //horizontal line 1
 setlinestyle(SOLID_LINE, 1,1);
 line (k-135,l-105,k+135,l-105);   //horizontal line 2
 line (k-135,l-75,k+135,l-75);     //horizontal line 3
 setlinestyle(SOLID_LINE, 1,3);
 line (k-135,l-45,k+135,l-45);     //horizontal line 4
 setlinestyle(SOLID_LINE, 1,1);
 line (k-135,l-15,k+135,l-15);     //horizontal line 5
 line (k-135,l+15,k+135,l+15);     //horizontal line 6
 setlinestyle(SOLID_LINE, 1,3);
 line (k-135,l+45,k+135,l+45);     //horizontal line 7
 setlinestyle(SOLID_LINE, 1,1);
 line (k-135,l+75,k+135,l+75);     //horizontal line 8
 line (k-135,l+105,k+135,l+105);   //horizontal line 9
 setlinestyle(SOLID_LINE, 1,3);
 line (k-135,l+135,k+135,l+135);   //horizontal line 10
}
int puzzle::enter()
{delay(1000);
 cleardevice();
 display();
 P.disp();
 settextstyle(0,0,0);
 outtextxy(1,15,"Press E to exit at any time");
 outtextxy(1,30,"Click and enter number to be entered");
 int k=getmaxx()/2;
 int m=getmaxy()/2;
 int X,Y,x,y,z;
 restrict(k-135,m-135,k+135,m+135);
 detect(X,Y);
 for (int i=0;i<9;i++)
  if ((Y>=m-135+i*30) && (Y<m-135+(i+1)*30))
      {x=i+1; break;}
 for (i=0;i<9;i++)
  if ((X>=k-135+i*30) && (X<k-135+(i+1)*30))
      {y=i+1; break;}
 char r;
 cin>>r;
 if(r=='E'||r=='e')
 return 2;
 z=(int)(r-48);
 if (!((x>=1&&x<=9)&&(y>=1&&y<=9)&&(z>=1&&z<=9)))
 return 0;
 if(!rowcheck(z,x))
 return 0;
 if(!colcheck(z,y))
 return 0;
 if (!boxcheck(z,x,y))
 return 0;
 if (x==1)
 if (!a[y-1]) {a[y-1]=z;  mindisp (x-1,y-1,a);} else return -1;
 else if (x==2)
 if (!b[y-1]) {b[y-1]=z;   mindisp (x-1,y-1,b);} else return -1;
 else if (x==3)
 if (!c[y-1]) {c[y-1]=z;   mindisp (x-1,y-1,c);} else return -1;
 else if (x==4)
 if (!d[y-1]) {d[y-1]=z;   mindisp (x-1,y-1,d);} else return -1;
 else if (x==5)
 if (!e[y-1]) {e[y-1]=z;   mindisp (x-1,y-1,e);} else return -1;
 else if (x==6)
 if (!f[y-1]) {f[y-1]=z;   mindisp (x-1,y-1,f);} else return -1;
 else if (x==7)
 if (!g[y-1]) {g[y-1]=z;   mindisp (x-1,y-1,g);} else return -1;
 else if (x==8)
 if (!h[y-1]) {h[y-1]=z;   mindisp (x-1,y-1,h);} else return -1;
 else if (!l[y-1]) {l[y-1]=z; mindisp (x-1,y-1,l);} else return -1;
 return 1;
}
void read()
{int k=random(10);
 ifstream f;
 switch(k)
 {case 0:f.open("sudoku1.txt");break;
  case 1:f.open("sudoku2.txt");break;
  case 2:f.open("sudoku3.txt");break;
  case 3:f.open("sudoku4.txt");break;
  case 4:f.open("sudoku5.txt");break;
  case 5:f.open("sudoku6.txt");break;
  case 6:f.open("sudoku7.txt");break;
  case 7:f.open("sudoku8.txt");break;
  case 8:f.open("sudoku9.txt");break;
  case 9:f.open("sudoku10.txt");break;
 }
 char c;
 int i=0;
 while (f.get(c))
 if (isdigit(c))
  temp[i++]=(int)c-48;
 f.close();
 P.generate(temp);
 P.disp();
}
void instructions (void)
{cleardevice();
 setbkcolor(BLUE);
 setcolor(15);
 settextstyle (0,0,2);
 outtextxy (0.5*getmaxx()/2+60,1,"INSTRUCTIONS");
 settextstyle (0,0,0);
 ifstream f("ins.txt");
 char word [80];
 int c=0;
 while (f.getline(word,80))
 {outtextxy(1,30+c,word);
  c+=15;
  if (c==105)
  break;
 }
 f.close();
 delay (5000);
 outtextxy (1,135,"Shall we start?");
 outtextxy (1,150,"Press any key to continue");
 getch();
}

// method that contols the initial screen and takes in the user choice as a number
void initdisplay (char &ch)
{ 
  cleardevice();
  setcolor(15);
  setbkcolor(BLUE);
  settextstyle (0,0,3);
  outtextxy (0.4*getmaxx()/2,1,"WELCOME TO SUDOKU");
  settextstyle (0,0,0);
  outtextxy (1,30,"Have fun playing this wonderful logic game!!!");
  outtextxy (1,45,"Press 1 for instructions");
  outtextxy (1,60,"Press 2 to play");
  outtextxy (1,75,"Press 3 to exit");
  cin>>ch;
}

// method that controls the display of the solution when the user asks for it
void solution ()
{ 
  P.fill();
  display();
  P.disp();
  outtextxy(getmaxx()/2-70,1,"SOLUTION");
  settextstyle(0,0,0);
  outtextxy(1,30,"Press any key to exit");
  getch();
}

void play()
{read();
 display();
 int v=0,flag=1; char c;
 while (v<51 && flag)
 {display();
  P.disp();
  settextstyle(0,0,0);
  int k=P.enter();
  while (1)
  {if (k==1) {delay(2000); v++; break;}
   else if (k==0)
   {outtextxy(300,30,"Invalid reenter");k=P.enter();}
   else if (k==-1)
   {outtextxy(300,45,"Box already filled reenter"); k=P.enter();}
   else if (k==2)
   {cleardevice();
    solution();
    cleardevice();
    setbkcolor(BLUE);
    settextstyle(0,0,3);
    outtextxy(140,200,"Exiting Game..."); delay (3000);
    flag=0; break;
   }
  }
 }
 if (v==51)
 {cleardevice();
  setbkcolor(BLUE);
  outtextxy(150,200,"Congratulations!!!! You have won");
 }
}
void main()
{clrscr();
 int gdriver=DETECT,gmode,errorcode;
 initgraph (&gdriver,&gmode,"C:\\TurboC++\\Disk\\TurboC3\\BIN");   //"c:\\tcc\\bgi");	 //"C:\Turbo\TC\BIN");
 detect_mouse ();
 showmouse_graphics();
 char ch;
 do
 {initdisplay(ch);
  while ((ch!='1') && (ch!='2') && (ch!='3'))
  { setcolor(15);
    outtextxy (1,120,"Invalid key");
    moveto(1,1);
    delay(3000);
    initdisplay(ch);}
  switch (ch)
  {case '1':
   instructions();
   case '2':
   play();
   break;
   case '3':
   {cleardevice();
    setbkcolor(BLUE);
    setcolor(15);
    settextstyle(0,0,3);
    outtextxy(110,200,"Thank You.... BYE");
    delay(3000);
   }
  }
 }while(ch!='3');
 hide_mouse();
 closegraph();
}


